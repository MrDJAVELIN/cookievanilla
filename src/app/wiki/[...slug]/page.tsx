import fs from "fs";
import path from "path";
import matter from "gray-matter";
import type { Metadata } from "next";
import { unified } from "unified";
import remarkParse from "remark-parse";
import remarkRehype from "remark-rehype";
import rehypeStringify from "rehype-stringify";
import Sidebar from "@/components/Sidebar";
import NotFound from "@/app/not-found";

const wikiRoutes = [
    {
        type: "category",
        path: "important",
        name: "üç´ –í–∞–∂–Ω–æ–µ",
        files: [
            { type: "file", path: "rules.md", name: "üìó –ü—Ä–∞–≤–∏–ª–∞" },
            { type: "file", path: "linking.md", name: "‚õìÔ∏è‚Äçüí• –ü—Ä–∏–≤—è–∑–∫–∞" },
            {
                type: "file",
                path: "play.md",
                name: "üïπÔ∏è –ö–∞–∫ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä?",
            },
            { type: "file", path: "mods.md", name: "üß© –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏" },
            {
                type: "file",
                path: "answers.md",
                name: "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
            },
        ],
    },
    {
        type: "category",
        path: "mechanics",
        name: "‚öôÔ∏è –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ú–µ—Ö–∞–Ω–∏–∫–∏",
        files: [
            { type: "file", path: "commands.md", name: "üéµ –ö–æ–º–∞–Ω–¥—ã" },
            { type: "file", path: "skin-url.md", name: "üé° –°–∫–∏–Ω—ã" },
            { type: "file", path: "chat.md", name: "üí¨ –ß–∞—Ç" },
            { type: "file", path: "brew.md", name: "üçª –ù–∞–ø–∏—Ç–∫–∏" },
            { type: "file", path: "crafts.md", name: "üí° –ö—Ä–∞—Ñ—Ç—ã" },
            {
                type: "file",
                path: "podpis-predmetov.md",
                name: "‚úçÔ∏è –ü–æ–¥–ø–∏—Å—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤",
            },
            { type: "file", path: "plasmovoice.md", name: "üîä –ì–æ–ª–æ—Å–æ–≤–æ–π –ß–∞—Ç" },
        ],
    },
    {
        type: "category",
        path: "roleplay",
        name: "üß¢ Roleplay",
        files: [{ type: "file", path: "roles.md", name: "üé≠ –†–æ–ª–∏" }],
    },
];

// –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—É—Ç–µ–π
export async function generateStaticParams() {
    return wikiRoutes.flatMap((category) =>
        category.files.map((file) => ({
            slug: [category.path, file.path.replace(/\.md$/, "")],
        }))
    );
}

async function getPageContent(slug: string[]) {
    const filePath = path.join(
        process.cwd(),
        "src/wiki",
        slug[0],
        `${slug[1]}.md`
    );

    if (!fs.existsSync(filePath)) {
        throw new Error("File not found");
    }

    const fileContent = fs.readFileSync(filePath, "utf-8");
    const { content } = matter(fileContent);

    const processed = await unified()
        .use(remarkParse)
        .use(remarkRehype)
        .use(rehypeStringify)
        .process(content);

    return processed.toString();
}

export async function generateMetadata({
    params,
}: {
    params: { slug: string[] };
}): Promise<Metadata> {
    // –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å, –ø–æ–¥–≥—Ä—É–∂–∞—è frontmatter –∏–∑ —Ñ–∞–π–ª–∞
    return {
        title: `Wiki - ${params.slug.join(" / ")}`,
    };
}

interface PageProps {
    params: {
        slug: string[];
    };
}

export default async function WikiPage({ params }: PageProps) {
    let html = "";
    try {
        html = await getPageContent(params.slug);
    } catch {
        return <NotFound />;
    }

    return (
        <div style={{ display: "flex" }}>
            <Sidebar data={wikiRoutes} />
            <div style={{ padding: 24, maxWidth: 800 }}>
                <div dangerouslySetInnerHTML={{ __html: html }} />
            </div>
        </div>
    );
}
